---
import { i18n } from "astro:config/client";
import { render, getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import Time from "$utils/time";
import Base from "$layouts/Base.astro";
import Heatmap from "$components/Heatmap.svelte";
import i18nit from "$i18n";

export async function getStaticPaths() {
	// Create path for each locale, omitting default locale from URL
	return i18n!.locales.map(locale => ({ params: { locale: locale == i18n?.defaultLocale ? undefined : (locale as string) } }));
}

const { locale = i18n!.defaultLocale } = Astro.params;

const t = i18nit(locale);

// Get preface content for current locale, sorted by timestamp (newest first)
const prefaces = (
	await getCollection("preface", preface => {
		// Extract language and ID from file path structure
		const [language, id] = preface.id.split("/");
		preface.id = id;

		// Filter by current locale
		return language == locale;
	})
).sort((a, b) => b.data.timestamp.getTime() - a.data.timestamp.getTime());

// Get published notes for current locale, sorted by timestamp (newest first)
const notes = (
	await getCollection("note", note => {
		// Extract language and note ID from file path structure
		const [language] = note.id.split("/");

		// Filter published notes by current locale
		return !note.data.draft && language == locale;
	})
).sort((a, b) => b.data.timestamp.getTime() - a.data.timestamp.getTime());

// Get published jottings for current locale
const jottings = await getCollection("jotting", jotting => {
	// Extract language and jotting ID from file path structure
	const [language] = jotting.id.split("/");

	// Filter published jottings by current locale
	return !jotting.data.draft && language == locale;
});

// Get the most recent preface for display
const preface = prefaces[0];
// Render preface content if available, otherwise use empty object
const { Content } = preface ? await render(preface) : ({} as any);
---

<Base title={t("navigation.home")} {locale}>
	<main class="flex flex-col gap-10 sm:gap-20 flex-grow">
		{
			preface && (
				<section class="flex flex-col">
					<article class="markdown">
						<Content />
					</article>
					<a href={getRelativeLocaleUrl(locale, "/preface")} class="self-end my-2 text-size-sm c-secondary">
						—— {Time.date.locale(preface.data.timestamp, locale)}
					</a>
				</section>
			)
		}

		{
			(notes.length > 0 || jottings.length > 0) && (
				<footer class="flex items-center justify-center">
					<Heatmap {locale} {notes} {jottings} />
				</footer>
			)
		}
	</main>
</Base>
